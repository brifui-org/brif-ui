import { existsSync, mkdirSync, writeFile } from "node:fs";
import path from "node:path";

import { BrifUIPluginConfig, ColorConfig, DeepRequired } from "../../types";

const DIR = ".brifui";
const FILENAME = `${DIR}/brif-types.d.ts`;
const THEME_FILENAME = `${DIR}/theme-config.ts`;

const generateBreakpointTypes = (configs: BrifUIPluginConfig) => {
  const { breakpoints } = configs.base || {};

  if (!breakpoints) {
    return `breakpoints: BreakpointConfig;`;
  }

  return `breakpoints: BreakpointConfig<{
      ${Object.keys(breakpoints)
        .map((breakpoint) => `${JSON.stringify(breakpoint)}: string;\n`)
        .join("")}
    }>;`;
};

const generateColorTypes = (
  colors: Record<string, ColorConfig> = {},
  tier?: "ref" | "sys"
) => {
  return `${tier === "ref" ? "ExtendRefColors" : "ExtendSysColors"}<{${Object.keys(
    colors
  )
    .map((color) => {
      const colorValue = colors[color];
      if (typeof colorValue === "string")
        return `${JSON.stringify(color)}: string;\n`;
      else if (typeof colorValue === "object") {
        return `${JSON.stringify(color)}: {
        ${Object.keys(colorValue)
          .map((shade) => `${JSON.stringify(shade)}: string;\n`)
          .join("")}
        };\n`;
      }
      return `${JSON.stringify(color)}: never;\n`;
    })
    .join("")}}>;`;
};

export const generateThemeKeys = (configs: BrifUIPluginConfig) => {
  const { themes = {} } = configs;
  const keys = Object.keys(themes).filter(
    (key) => key !== "light" && key !== "dark"
  );
  return `type BrifUITheme = ${["light", "dark", ...keys].map((themeKey) => JSON.stringify(themeKey)).join(" | ")}`;
};

export const generateTypes = async (configs: BrifUIPluginConfig) => {
  return new Promise((res, rej) => {
    const { colors: { sys = {}, ref = {} } = {} } = configs.base || {};

    if (!existsSync(path.resolve(process.cwd(), DIR))) {
      mkdirSync(path.resolve(process.cwd(), DIR));
    }
    writeFile(
      path.resolve(process.cwd(), FILENAME),
      `/**
 * This file is auto-generated by \`@brifui/theme\`.
 * NOTE: DO NOT MODIFY THIS FILE MANUALLY
 */
import {
    BreakpointConfig,
    ExtendRefColors,
    ExtendSysColors
  } from "@brifui/theme";

declare global {
  interface BrifUIThemeConfig {
    colors: {
      ref: ${generateColorTypes(ref, "ref")}
      sys: ${generateColorTypes(sys, "sys")}
    },
    ${generateBreakpointTypes(configs)}
  };

  ${generateThemeKeys(configs)}
}
`,
      (err) => {
        if (err) rej(err);
        else res(void 0);
      }
    );
  });
};

export const generateThemeConfigFile = async (
  configs: DeepRequired<BrifUIPluginConfig>
) => {
  return new Promise((res, rej) => {
    if (!existsSync(path.resolve(process.cwd(), DIR))) {
      mkdirSync(path.resolve(process.cwd(), DIR));
    }
    writeFile(
      path.resolve(process.cwd(), THEME_FILENAME),
      `/**
 * This file is auto-generated by \`@brifui/theme\`.
 * NOTE: DO NOT MODIFY THIS FILE MANUALLY
 */
export const themeConfig  = ${JSON.stringify(configs)};
`,
      (err) => {
        if (err) rej(err);
        else res(void 0);
      }
    );
  });
};

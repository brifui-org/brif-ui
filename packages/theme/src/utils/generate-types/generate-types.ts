import { existsSync, mkdirSync, writeFile } from "node:fs";
import path from "node:path";

import { BrifUIPluginConfigArgs } from "../../types";

const DIR = ".brifui";
const FILENAME = `${DIR}/brif-types.d.ts`;

export const generateTypes = async (configs: BrifUIPluginConfigArgs) => {
  return new Promise((res, rej) => {
    if (!configs.theme || !configs.theme.breakpoints) {
      return res(void 0);
    }

    const { breakpoints, colors: { sys = {}, ref = {} } = {} } = configs.theme;

    console.log(sys, ref);

    if (!existsSync(path.resolve(process.cwd(), DIR))) {
      mkdirSync(path.resolve(process.cwd(), DIR));
    }
    writeFile(
      path.resolve(process.cwd(), FILENAME),
      `/**
 * This file is auto-generated by \`@brifui/theme\`.
 * NOTE: DO NOT MODIFY THIS FILE MANUALLY
 */
import { Breakpoints, ExtendRefColors, ExtendSysColors } from "@brifui/theme";

declare module "@brifui/theme" {
  export type BrifUIThemeConfig = {
    colors: {
      ref: ExtendRefColors<{${Object.keys(sys)
        .map((color) => `${JSON.stringify(color)}: string;\n`)
        .join("")}}>;
      sys: ExtendSysColors<{${Object.keys(ref)
        .map((color) => `${JSON.stringify(color)}: string;\n`)
        .join("")}}>;
    },
    breakpoints: Breakpoints<{
      ${Object.keys(breakpoints)
        .map((breakpoint) => `${JSON.stringify(breakpoint)}: string;\n`)
        .join("")}
    }>;
  };
}
`,
      (err) => {
        if (err) rej(err);
        else res(void 0);
      }
    );
  });
};
